name: Terraform Lint and Validate

on:
    pull_request:
        paths:
            - "infra/**.tf"
permissions:
    contents: read
    pull-requests: write

jobs:
    lint-and-validate:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                  terraform_version: ${{ env.TERRAFORM_VERSION }}

            - name: Install TFLint
              run: |
                  curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

            - name: Terraform Format Check
              run: |
                  terraform fmt -diff -check -recursive ./infra | tee fmt-output.txt
              continue-on-error: true

            - name: Terraform Lint
              run: |
                  tflint --format=compact ./infra | tee lint-output.txt
              continue-on-error: true

            - name: Terraform Init
              run: terraform -chdir=./infra init -backend=false

            - name: Terraform Validate
              run: terraform -chdir=./infra validate | tee validate-output.txt
              continue-on-error: true

            - name: Create PR Comment with Results
              if: always()
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const fs = require('fs');

                      const fmt = fs.readFileSync('fmt-output.txt', 'utf8').trim() || '✅ No format issues';
                      const lint = fs.readFileSync('lint-output.txt', 'utf8').trim() || '✅ No lint issues';
                      const validate = fs.readFileSync('validate-output.txt', 'utf8').trim() || '✅ Validation passed';

                      const body = `
                      ## Terraform Checks
                      **Format:**\n\`\`\`\n${fmt}\n\`\`\`
                      **Lint:**\n\`\`\`\n${lint}\n\`\`\`
                      **Validate:**\n\`\`\`\n${validate}\n\`\`\`
                      `;

                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      });

                      const botComment = comments.find(c => c.user.type === 'Bot' && c.body.includes('## Terraform Checks'));

                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body
                        });
                      } else {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body
                        });
                      }

            - name: Fail if issues found
              if: always()
              run: |
                  if [[ -s fmt-output.txt || -s lint-output.txt || -s validate-output.txt ]]; then
                    echo "❌ Terraform issues detected."
                    exit 1
                  fi
