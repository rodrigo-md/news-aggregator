name: Terraform Lint and Validate

on:
    pull_request:
        paths:
            - "infra/**.tf"
permissions:
    contents: read
    pull-requests: write

jobs:
    lint-and-validate:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: ${{ env.TERRAFORM_VERSION }}

            - name: Install TFLint
              run: |
                  curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

            - name: Terraform Format Check
              run: |
                  terraform fmt -diff -check -recursive ./infra | tee fmt-output.txt
              continue-on-error: true

            - name: Terraform Lint
              run: |
                  tflint --format=compact ./infra | tee lint-output.txt
              continue-on-error: true

            - name: Terraform Init
              run: terraform -chdir=./infra init -backend=false

            - name: Terraform Validate
              run: terraform -chdir=./infra validate | tee validate-output.txt
              continue-on-error: true

            - name: Create PR Comment and Fail if Issues Found
              if: always()
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const core = require('@actions/core');
                      const fs = require('fs');

                      // Helper to strip ANSI escape codes
                      const stripAnsi = (str) => str.replace(/\u001b\[.*?m/g, '').trim();

                      const fmt = stripAnsi(fs.readFileSync('fmt-output.txt', 'utf8') || '');
                      const lint = stripAnsi(fs.readFileSync('lint-output.txt', 'utf8') || '');
                      const validate = stripAnsi(fs.readFileSync('validate-output.txt', 'utf8') || '');

                      const fmtOK = fmt === '';
                      const lintOK = lint === '';
                      const validateOK = /Success!/i.test(validate);

                      const body = `
                      ## Terraform Checks
                      **Format:** ${fmtOK ? '✅ No format issues' : '❌ No format issues'}
                      **Lint:** ${lintOK ? '✅ No lint issues' : '❌ No lint issues'}
                      **Validate:** ${validateOK ? '✅ Validation passed' : '❌ Validation passed'}
                      `;

                      // Find existing comment or create one
                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      });

                      const botComment = comments.find(c => c.user.type === 'Bot' && c.body.includes('## Terraform Checks'));

                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body
                        });
                      } else {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body
                        });
                      }

                      // Fail the workflow if any check fails
                      if (!fmtOK || !lintOK || !validateOK) {
                        core.setFailed("❌ Terraform issues detected");
                      }
